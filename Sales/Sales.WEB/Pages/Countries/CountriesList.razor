@page "/countries"
@attribute [Authorize(Roles = "Admin")]

<h3>Paises</h3>

<NavLink class="btn btn-primary mb-3" href="/countries/create">
	Nuevo Pais
</NavLink>

<div class="mb-3">
	<Filter Placeholder="Buscar pais..." OnFilter="OnFilter" OnClear="OnClear"></Filter>
</div>

<Pagination CurrentPage="@currentPage" TotalPages="@totalPages" SelectedPage="SelectedPageAsync"></Pagination>

<GenericList List="paises">
	<Body>
	<table class="table-striped table">
		<thead>
		<tr>
			<th>Pais</th>
			<th>Estados</th>
			<th>Ciudades</th>
			<th></th>
		</tr>	
		</thead>
		<tbody>
		@foreach (var pais in paises!)
		{
			<tr>
				<td>@pais.Name</td>
				<td>@pais.StatesCount</td>
				<td>
					<a class="btn btn-info" href="/countries/states/list/@pais.Id">Estados</a>
					<a class="btn btn-warning" href="/countries/edit/@pais.Id">Editar</a>
					<button class="btn btn-danger" @onclick="() => Delete(pais.Id)">Borrar</button>
				</td>
			</tr>
		}
		</tbody>	
	</table>
	</Body>
</GenericList>

@code {
	private List<Country>? paises;

	private int currentPage = 1;
	private int totalPages;
	private string textFilter = "";
	
	protected override async Task OnInitializedAsync()
	{
		await CargaLista();
	}

	private async Task CargaLista(int page = 1, string filter = "")
	{
		var url1 = $"/api/countries/list?page={page}&filter={filter}";
		var url2 = $"/api/countries/totalpages?filter={filter}";

		var response = await repositorio.Get<List<Country>>(url1);
		var response2 = await repositorio.Get<int>(url2);

		paises = response.Response;
		totalPages = response2.Response;
	}

	private async Task Delete(int id)
	{
		try
		{
			var confirmacion = await alert.FireAsync(new SweetAlertOptions
			{
				Title = "*** Confirmación ***",
				Text = "¿Estas seguro de eliminar el registro?",
				ShowCancelButton = true,
				Icon = SweetAlertIcon.Question,
				CancelButtonText = "No",
				ConfirmButtonText = "Si"
			});

			if (!confirmacion.IsConfirmed) return;

			var response = await repositorio.Delete($"api/countries/{id}");
			if (response.Error)
			{
				var message = await response.GetErrorMessageAsync();
				await alert.FireAsync("Error", message);
				return;
			}

			paises = null;
			await CargaLista();
		}
		catch (Exception e)
		{
			await alert.FireAsync("Error", e.Message);
		}
	}

	private async Task SelectedPageAsync(int page)
	{
		currentPage= page;
		await CargaLista(page, textFilter);
	}

	private async Task OnFilter(string filter)
	{
		textFilter = filter;
		currentPage = 1;
		await CargaLista(currentPage, textFilter);
	}

	private async Task OnClear()
	{
		textFilter = "";
		currentPage = 1;
		await CargaLista(currentPage, textFilter);
	}
}
