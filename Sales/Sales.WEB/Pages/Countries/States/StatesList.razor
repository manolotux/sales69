@page "/countries/states/list/{Id:int}"

<h3>Estados</h3>

<div class="row mt-3 mb-3">
	<strong class="col-12 mb-2">Pais: @_country?.Name</strong>
	<div class="col-12 align-content-center gap-2 flex-row">
		<button class="btn btn-primary" @onclick="AddState">
			Nuevo Estado
		</button>
		<NavLink class="btn btn-danger" href="/countries">
			Regresar
		</NavLink>
	</div>
	
</div>

<div class="mb-3">
	<Filter Placeholder="Buscar estado..." OnFilter="OnFilter" OnClear="OnClear"></Filter>
</div>

<Pagination CurrentPage="@currentPage" TotalPages="@totalPages" SelectedPage="SelectedPageAsync"></Pagination>

<GenericList List="_estados">
	<Body>
		<table class="table-striped mt-3 table">
			<thead>
				<tr>
					<th>Estado</th>
					<th>Ciudades</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var estado in _estados!)
				{
					<tr>
						<td>@estado.Name</td>
						<td>@estado.CitiesCount</td>
						<td>
							<a class="btn btn-info" href="/countries/states/cities/list/@estado.Id">Ciudades</a>
							<a class="btn btn-warning" href="/countries/states/edit/@estado.Id">Editar</a>
							<button class="btn btn-danger" @onclick="() => Delete(estado.Id)">Borrar</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</Body>
</GenericList>

@code {

	private Country? _country;
	private List<State>? _estados;

	private int currentPage = 1;
	private int totalPages;
	private string textFilter = "";

	[Parameter]
	public int Id { get; set; }


	private async Task CargaLista(int page = 1, string filter = "")
	{
		var response = await repositorio.Get<Country>($"api/countries/{Id}");
		if (response.Error)
		{
			if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
			{
				await alert.FireAsync("Error", "No se pudo localizar el País");
				nav.NavigateTo("/countries");
				return;
			}
			var message = await response.GetErrorMessageAsync();
			await alert.FireAsync("Error", message);
			nav.NavigateTo("/countries");
			return;
		}

		_country = response.Response!;

		var url1 = $"/api/states/list?id={Id}&page={page}&filter={filter}";
		var url2 = $"/api/states/totalpages?id={Id}&filter={filter}";
		var responseEstados = await repositorio.Get<List<State>>(url1);
		if (responseEstados.Error)
		{
			var message = await response.GetErrorMessageAsync();
			await alert.FireAsync("Error", message);
			nav.NavigateTo("/countries");
			return;
		}
		var responseTotalPages = await repositorio.Get<int>(url2);
		totalPages = responseTotalPages.Response;
		_estados = responseEstados.Response;
	}

	
	protected override async Task OnInitializedAsync()
	{
		await CargaLista();
	}

	private async Task Delete(int id)
	{
		try
		{
			var confirmacion = await alert.FireAsync(new SweetAlertOptions
				{
					Title = "*** Confirmación ***",
					Text = "¿Estas seguro de eliminar el registro?",
					ShowCancelButton = true,
					Icon = SweetAlertIcon.Question,
					CancelButtonText = "No",
					ConfirmButtonText = "Si"
				});

			if (!confirmacion.IsConfirmed) return;

			var response = await repositorio.Delete($"api/states/{id}");
			if (response.Error)
			{
				var message = await response.GetErrorMessageAsync();
				await alert.FireAsync("Error", message);
				return;
			}

			_estados = null;
			await CargaLista();
		}
		catch (Exception e)
		{
			await alert.FireAsync("Error", e.Message);
		}
	}

	private void AddState()
	{
		nav.NavigateTo($"/countries/states/create/{Id}");
	}

	private async Task SelectedPageAsync(int page)
	{
		currentPage = page;
		await CargaLista(page, textFilter);
	}

	private async Task OnFilter(string filter)
	{
		textFilter = filter;
		currentPage = 1;
		await CargaLista(currentPage, textFilter);
	}

	private async Task OnClear()
	{
		textFilter = "";
		currentPage = 1;
		await CargaLista(currentPage, textFilter);
	}
}
