@page "/categories"

<AuthorizeView>
	<NotAuthorized>
		<h2 class="mt-5">No estas autorizado</h2>
	</NotAuthorized>
	<Authorized>
		<h3>Paises</h3>

		<NavLink class="btn btn-primary mb-3" href="/categories/create">
			Nueva Categoria
		</NavLink>

		<div class="mb-3">
			<Filter Placeholder="Buscar categoria..." OnFilter="OnFilter" OnClear="OnClear"></Filter>
		</div>

		<Pagination CurrentPage="@currentPage" TotalPages="@totalPages" SelectedPage="SelectedPageAsync"></Pagination>

		<GenericList List="categorias">
			<Body>
			<table class="table-striped table">
				<thead>
				<tr>
					<th></th>
					<th>Categoria</th>
				</tr>	
				</thead>
				<tbody>
				@foreach (var pais in categorias!)
				{
					<tr>
						<td>
							<a class="btn btn-warning" href="/categories/edit/@pais.Id">Editar</a>
							<button class="btn btn-danger" @onclick="() => Delete(pais.Id)">Borrar</button>
						</td>
						<td>@pais.Name</td>
					</tr>
				}
				</tbody>	
			</table>
			</Body>
		</GenericList>
	</Authorized>
</AuthorizeView>



@code {
	private List<Category>? categorias;

	private int currentPage = 1;
	private int totalPages;
	private string textFilter = "";

	protected override async Task OnInitializedAsync()
	{
		await CargaLista();
	}

	private async Task CargaLista(int page = 1, string filter = "")
	{
		var url1 = $"/api/categories/list?page={page}&filter={filter}";
		var url2 = $"/api/categories/totalpages?filter={filter}";

		try
		{
			var response = await repositorio.Get<List<Category>>(url1);
			var response2 = await repositorio.Get<int>(url2);
			categorias = response.Response;
			totalPages = response2.Response;
		}
		catch (HttpRequestException e)
		{
			// if (response is { Error: true, HttpResponseMessage.StatusCode: HttpStatusCode.Unauthorized })
			// {
			// 	await alert.FireAsync("Error", "No estas autorizado para ingresar a este recurso");
			// 	nav.NavigateTo("/");
			// 	return;
			// }

			Console.WriteLine(e);
			throw;
		}

		
	}

	private async Task Delete(int id)
	{
		try
		{
			var confirmacion = await alert.FireAsync(new SweetAlertOptions
			{
				Title = "*** Confirmación ***",
				Text = "¿Estas seguro de eliminar el registro?",
				ShowCancelButton = true,
				Icon = SweetAlertIcon.Question,
				CancelButtonText = "No",
				ConfirmButtonText = "Si"
			});

			if (!confirmacion.IsConfirmed) return;

			var response = await repositorio.Delete($"api/categories/{id}");
			if (response.Error)
			{
				var message = await response.GetErrorMessageAsync();
				await alert.FireAsync("Error", message);
				return;
			}

			categorias = null;
			await CargaLista();
		}
		catch (Exception e)
		{
			await alert.FireAsync("Error", e.Message);
		}
	}

	private async Task SelectedPageAsync(int page)
	{
		currentPage = page;
		await CargaLista(page, textFilter);
	}

	private async Task OnFilter(string filter)
	{
		textFilter = filter;
		currentPage = 1;
		await CargaLista(currentPage, textFilter);
	}

	private async Task OnClear()
	{
		textFilter = "";
		currentPage = 1;
		await CargaLista(currentPage, textFilter);
	}
}
