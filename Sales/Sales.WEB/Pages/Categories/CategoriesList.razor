@page "/categories"

<h3>Paises</h3>

<NavLink class="btn btn-primary" href="/categories/create">
	Nueva Categoria
</NavLink>

<GenericList List="categorias">
	<Body>
	<table class="table-striped table">
		<thead>
		<tr>
			<th></th>
			<th>Categoria</th>
		</tr>	
		</thead>
		<tbody>
		@foreach (var pais in categorias!)
		{
			<tr>
				<td>
					<a class="btn btn-warning" href="/categories/edit/@pais.Id">Editar</a>
					<button class="btn btn-danger" @onclick="() => Delete(pais.Id)">Borrar</button>
				</td>
				<td>@pais.Name</td>
			</tr>
		}
		</tbody>	
	</table>
	</Body>
</GenericList>

@code {
	private List<Category>? categorias;

	protected override async Task OnInitializedAsync()
	{
		await CargaLista();
	}

	private async Task CargaLista()
	{
		var response = await repositorio.Get<List<Category>>("/api/categories/list");
		categorias = response.Response;
	}

	private async Task Delete(int id)
	{
		try
		{
			var confirmacion = await alert.FireAsync(new SweetAlertOptions
			{
				Title = "*** Confirmación ***",
				Text = "¿Estas seguro de eliminar el registro?",
				ShowCancelButton = true,
				Icon = SweetAlertIcon.Question,
				CancelButtonText = "No",
				ConfirmButtonText = "Si"
			});

			if (!confirmacion.IsConfirmed) return;

			var response = await repositorio.Delete($"api/categories/{id}");
			if (response.Error)
			{
				var message = await response.GetErrorMessageAsync();
				await alert.FireAsync("Error", message);
				return;
			}

			categorias = null;
			await CargaLista();
		}
		catch (Exception e)
		{
			await alert.FireAsync("Error", e.Message);
		}
	}
}
