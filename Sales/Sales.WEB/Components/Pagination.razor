
@if (TotalPages > 1)
{
	<nav>
		<ul class="pagination justify-content-center">
			@foreach (var link in Links)
			{
				<li @onclick="() => SelectedPageHandler(link)"
					class="page-item 
						@(link.Active ? "active" : "")
						@(link.Enable ? "" : "disabled")"
					style="
						cursor: pointer;
						user-select: none;">
					
					<a class="page-link">@link.Text</a>
				</li>
			}
		</ul>
	</nav>	
}

@code {
	[Parameter] 
    public int CurrentPage { get; set; } = 1;
	[Parameter] 
    public int TotalPages { get; set; }
	[Parameter] 
    public int Radio { get; set; } = 10;
	[Parameter] 
    public EventCallback<int> SelectedPage { get; set; }

	List<PageModel> Links = [];
	
	class PageModel
	{
		public string Text { get; set; } = null!;
		public int Page { get; set; }
		public bool Enable { get; set; } = true;
		public bool Active { get; set; } = false;
	}

	private async Task SelectedPageHandler(PageModel page)
	{
		if (page.Enable)
			await SelectedPage.InvokeAsync(page.Page);
	}

	protected override void OnParametersSet()
	{
		Links.Clear();
		if (TotalPages == 0 || Radio == 0) return;

		if(CurrentPage > TotalPages)
			CurrentPage = TotalPages;

		if(CurrentPage < 1)
			CurrentPage = 1;

		var firstPage = Math.Max(1, CurrentPage - Radio + 1);
		var lastPage = Math.Min(TotalPages, firstPage + Radio - 1);

		Links.Add(new PageModel
		{
			Text = "Anterior",
			Page = CurrentPage - 1,
			Enable = CurrentPage > 1
		});

		for (var i = firstPage; i <= lastPage; i++)
		{
			Links.Add(new PageModel
			{
				Text = i.ToString(),
				Page = i,
				Active = i == CurrentPage
			});
		}

		Links.Add(new PageModel
		{
			Text = "Siguiente",
			Page = CurrentPage + 1,
			Enable = CurrentPage < TotalPages
		});

		base.OnParametersSet();
	}

}
